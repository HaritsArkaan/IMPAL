task scenario:
1. responden masuk kedalam aplikasi (melalui splash screen kemudian login/signup) 
2. responden akan menambahkan data sampah dan maggot
3. responden memilih lokasi pengolahan sampah
4. responden melakukan scanning sampah dan maggot 
5. data berhasil ditambahkan, pengguna Kembali ke home screen



import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

import math

data = pd.read_csv("D:/VIT/data mining/project/bank.csv")
data.head(10)

data = pd.read_csv("D:/VIT/data mining/project/bank.csv",sep=';',header=0)
data.head(10)


sns.pairplot(data)
sns.heatmap(data.corr(),annot=True)

data.head(2)
data.head(7)

mar_col = {'married':1,'single':0,'divorced':2}
data['marital']=data['marital'].map(mar_col)


edu_col={'primary':0,'secondary':1,'tertiary':2,'unknown':-1}
data['education']=data['education'].map(edu_col)

default_col={'no':0,'yes':1}
data['default']=data['default'].map(default_col)

housing_col={'no':0,'yes':1}
data['housing']=data['housing'].map(housing_col)

loan_col = {'no':1,'yes':0}
data['loan']=data['loan'].map(loan_col)

data[data['poutcome']=="unknown"].head()


data=data.drop(['poutcome'],axis=1)
data=pd.get_dummies(data,columns=["job","contact","month"])
y_col = {'no':0,'yes':1}
data['y']=data['y'].map(y_col)
y=data['y']
data=data.drop('y',axis=1)
data.insert(39,"class",y,allow_duplicates=False)
data.head()


data.to_csv("Processed_data1.csv",index=False)
import csv
import random
import math
import operator
 
def loadDataset(filename, split, trainingSet=[] , testSet=[]):
	with open(filename, 'r') as csvfile:
	    lines = csv.reader(csvfile)
	    dataset = list(lines)
	    for x in range(1,len(dataset)-1):
	        for y in range(40):
	            dataset[x][y] = float(dataset[x][y])
	        if random.random() < split:
	            trainingSet.append(dataset[x])
	        else:
	            testSet.append(dataset[x])


def euclideanDistance(instance1, instance2, length):
    distance = 0
    for x in range(length):
        distance += pow((instance1[x] - instance2[x]), 2)
    return math.sqrt(distance)


def getNeighbors(trainingSet, testInstance, k):
    distances = []
    length = len(testInstance)-1
    for x in range(len(trainingSet)):
        dist = euclideanDistance(testInstance, trainingSet[x], length)
        distances.append((trainingSet[x], dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors
 
def getResponse(neighbors):
    classVotes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1), reverse=True)
    return sortedVotes[0][0]
 
def getAccuracy(testSet, predictions):
    correct = 0
    for x in range(len(testSet)):
        if testSet[x][-1] == predictions[x]:
                correct += 1
    return (correct/float(len(testSet))) * 100.0

def main():
    # prepare data
    trainingSet=[]
    testSet=[]
    split = 0.7
    loadDataset('Processed_data1.csv', split, trainingSet, testSet)
    print ("Train set: " + repr(len(trainingSet)))
    print ('Test set: ' + repr(len(testSet)))
    # generate predictions
    predictions=[]
    k = 3
    for x in range(len(testSet)):
        neighbors = getNeighbors(trainingSet, testSet[x], k)
        result = getResponse(neighbors)
        predictions.append(result)
        print('> predicted=' + repr(result) + ', actual=' + repr(testSet[x][12]))
    accuracy = getAccuracy(testSet, predictions)
    print('Accuracy: ' + repr(accuracy) + '%')
main()


25,2288
25,5
15,55
10,53
2,75



